version: '2.4'

services:
  portainer: # Manage Docker containers; on startup set 'password' as password
    image: portainer/portainer:latest
    ports:
      - 3080:9000
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainerdata:/data
  httpbin: # SUPER USEFUL for testing APIs
    image: kennethreitz/httpbin:latest
    mem_limit: 500m
    ports:
      - 2080:8080
  minio:
    image: bitnami/minio:latest
    mem_limit: 500m
    environment:
      MINIO_ACCESS_KEY: "access_key"
      MINIO_SECRET_KEY: "secret_key"
      MINIO_REGION_NAME: "fra1"
      MINIO_DEFAULT_BUCKETS: "bucket-foo:download bucket-bar"
    volumes:
      - miniodata:/data
    command: server /data
    ports:
      - 19000:9000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  redis:
    image: redis:latest
    volumes:
      - redisdata:/data
    ports:
      - 16379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  rediscommander:
    image: rediscommander/redis-commander:latest
    mem_limit: 500m
    environment:
      - "REDIS_HOSTS=local:redis:6379"
    ports:
     - 16378:8081
  mariadb:
    image: mariadb:10.5
    mem_limit: 600m
    environment:
      MYSQL_DATABASE: maria
      MYSQL_USER: maria
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
    ports:
      - 13306:3306
    volumes:
      - mariadata:/var/lib/mysql
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=mariadb
    ports:
      - 13305:80
    depends_on:
      - mariadb
  postgres:
    image: postgres:13
    mem_limit: 600m
    environment:
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_USER: "postgres" # default value retained
      POSTGRES_DB: "postgres" # default value retained
      PGDATA: "/var/lib/postgresql/data/pgdata" # subdir within volume
      POSTGRES_INITDB_WALDIR: "/var/lib/postgresql/data/waldata" # subdir within volume
    ports:
      - 15432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U youmeme"]
      interval: 10s
      timeout: 5s
      retries: 5
  pgadmin4:
    image: dpage/pgadmin4:latest
    mem_limit: 600m
    environment:
      PGADMIN_DEFAULT_EMAIL: "dev@example.com"
      PGADMIN_DEFAULT_PASSWORD: "postgres"
      PGADMIN_SERVER_NAME: "pgadmin4"
    ports:
      - 15431:80
    volumes:
      - pgadmindata:/var/lib/pgadmin
    depends_on:
      - postgres
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1
    mem_limit: 2000m
    ports:
      - 19200:9200
    environment:
      cluster.name: "dcdbs"
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      MAX_MAP_COUNT: "262144"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
  kibana:
    image: docker.elastic.co/kibana/kibana:7.11.1
    mem_limit: 1000m
    ports:
      - 15601:5601
    environment:
      SERVER_NAME: "kibana"
      ELASTICSEARCH_URL: "http://elasticsearch:9200"
    volumes:
      - kibanadata:/usr/share/kibana/config
    depends_on:
      - elasticsearch
  mongo:
    image: mongo:4.2
    mem_limit: 1000m
    ports:
      - 37017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: "mongo"
      MONGO_INITDB_ROOT_PASSWORD: "mongo"
    volumes:
      - mongodata:/data/db
  mongo-express:
    image: mongo-express:latest
    mem_limit: 500m
    ports:
      - 37016:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: "mongo"
      ME_CONFIG_MONGODB_ADMINPASSWORD: "mongo"
      ME_CONFIG_MONGODB_AUTH_USERNAME: "mongo"
      ME_CONFIG_MONGODB_AUTH_PASSWORD: "mongo"
      ME_CONFIG_MONGODB_SERVER: "mongo"
    depends_on:
      - mongo
  keycloak:
    image: jboss/keycloak:latest
    mem_limit: 1000m
    ports:
      - 18080:8080
    environment:
      # We configure initial admin user and password here via envars
      # Another way to do is run this command on a running container:
      # docker-compose exec keycloak keycloak/bin/add-user-keycloak.sh -u <USERNAME> -p <PASSWORD>
      # Then restarting the container:
      # docker-compose restart keycloak
      KEYCLOAK_USER: "user"
      KEYCLOAK_PASSWORD: "password"
      # Set the database to connect to
      DB_VENDOR: "postgres"
      DB_ADDR: "postgres"
      DB_PORT: "5432"
      ## make sure you create this db in postgres container
      ## the first time keycloak would just crash.
      DB_DATABASE: "keycloak"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
    depends_on:
      - postgres

volumes:
  portainerdata:
  miniodata:
  redisdata:
  pgdata:
  pgadmindata:
  esdata:
  kibanadata:
  mongodata:
  mariadata:
